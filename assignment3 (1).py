# -*- coding: utf-8 -*-
"""assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kvj8dLN4Nc4Fo4h2rXn4GgUv0vhBpz7k
"""


import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
import tensorflow as tf
from tensorflow import keras

from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam


from tensorflow.keras.utils import array_to_img,to_categorical,load_img
from tensorflow.keras.applications.resnet50 import preprocess_input,decode_predictions,ResNet50
from tensorflow.keras.preprocessing import image_dataset_from_directory

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model

img_height,img_width=224,224

batch_size=32

data_directory = '/content/lfw'

train_ds =image_dataset_from_directory(
  data_directory,
  validation_split=0.3,
  subset="training",
  seed=123,
  labels='inferred',
  image_size=(img_height, img_width),
  batch_size=batch_size)

validation_ds = image_dataset_from_directory(
  data_directory,
  validation_split=0.3,
  subset="validation",
  seed=123,
  labels='inferred',
  image_size=(img_height, img_width),
  batch_size=batch_size)

class_names = train_ds.class_names
print(class_names)

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
  for i in range(6):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

from tensorflow.keras.models import Model
# resnet_model = Sequential()

pretrained_model= ResNet50(include_top=False,
                   input_shape=(224,224,3),
                   pooling='avg',classes=5,
                   weights='imagenet')
for layer in pretrained_model.layers:
        layer.trainable=False

# resnet_model.add(pretrained_model)
# resnet_model.add(Flatten())
# resnet_model.add(Dense(512, activation='relu'))
# resnet_model.add(Dense(1, activation='softmax'))

x = Flatten() (pretrained_model.output)
prediction = Dense(len(class_names), activation = 'softmax')(x)

model = Model(inputs = pretrained_model.input, outputs = prediction)

model.summary()

model.compile (
    loss = 'categorical_crossentropy',
    optimizer = 'adam',
    metrics = ['accuracy']
)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale = 1./255,
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
    validation_split=0.7
)

test_datagen = ImageDataGenerator(
    rescale = 1./255,
    validation_split=0.3
)

IMAGE_SIZE = [224, 224]

batch_size=32

data_directory = '/content/lfw'

training_set = train_datagen.flow_from_directory(
    data_directory,
    target_size = IMAGE_SIZE,
    batch_size = 32,
    subset='training',
    class_mode = 'categorical' # As we have more than 2 so using categorical.. for 2 we might have used binary.
)

test_set = train_datagen.flow_from_directory(
    data_directory,
    target_size = IMAGE_SIZE,
    batch_size = 32,
    class_mode = 'categorical',
    subset='validation'
)

history = model.fit(
    training_set,
    validation_data = test_set,
    epochs = 5,
    steps_per_epoch = len(training_set),
    validation_steps = len(test_set)
)

plt.plot(history.history['loss'], label = 'train_loss')
plt.plot(history.history['val_loss'], label ='val loss')
plt.legend()
plt.show()
# plt.savefig('LossVal_loss

# Plot the Accuracy
plt.plot(history.history['accuracy'], label = 'train accuracy')
plt.plot(history.history['val_accuracy'], label ='val accuracy')
plt.legend()
plt.show()
# plt.savefig('valAccuracy')

prediction = model.predict(test_set)

prediction = np.argmax(prediction, axis = 1)
prediction

img = load_img('/content/lfw/Aaron_Guiel/Aaron_Guiel_0001.jpg', target_size = IMAGE_SIZE)

from tensorflow.keras.utils import img_to_array
x = img_to_array(img)
x

from sklearn.neighbors import NearestNeighbors
neighbors = NearestNeighbors(n_neighbors=10,
                             algorithm='ball_tree',
                             metric='euclidean')
neighbors

x = x / 255
x = np.expand_dims(x, axis = 0)
img_data = preprocess_input(x)

model.predict(img_data)

a = np.argmax(model.predict(img_data), axis = 1)

a

output_class=class_names[a[0]]
print("The predicted class is", output_class)

from sklearn.neighbors import NearestNeighbors
neighbors = NearestNeighbors(n_neighbors=1,
                             algorithm='ball_tree',
                             metric='euclidean')
neighbors

neighbors.fit(model.predict(img_data))
_, indices = neighbors.kneighbors(model.predict(img_data))
indices

from tensorflow.keras.utils import array_to_img,to_categorical

plt.figure(figsize=(10, 10))

epochs=10

for images, labels in train_ds.take(1):
  for var in range(6):

    ax = plt.subplot(3, 3, var + 1)

    plt.imshow(images[var].numpy().astype("uint8"))
    print(to_categorical(labels))